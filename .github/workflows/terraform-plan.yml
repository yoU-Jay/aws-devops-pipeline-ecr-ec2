name: Deploy to AWS

on:
  pull_request:
    branches:
      - dev
      - main

env:
  IMAGE_TAG: ${{ github.sha }}

jobs:
  deploy:
    name: Deploy Infra and App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Terraform Format Check
        working-directory: ./terraform
        run: terraform fmt -check -recursive

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init --backend-config="backend.tfvars"

      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -var-file="dev.tfvars"

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve -var-file="dev.tfvars"

      - name: Save all Terraform outputs to JSON
        working-directory: terraform
        run: terraform output -json > tf_output.json

      - name: Show terraform output json file contents
        run: cat terraform/tf_output.json

      - name: Set environment variables from terraform output
        run: |
          echo "EC2_HOST=$(jq -r '.ec2_host.value' terraform/tf_output.json)" >> $GITHUB_ENV
          echo "ECR_REPO_URL=$(jq -r '.ecr_repo_url.value' terraform/tf_output.json)" >> $GITHUB_ENV
          
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image to ECR
        run: |
          docker build -t ${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }} .
          docker push ${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }}

      - name: SSH into EC2 and deploy container
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ vars.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REPO }}
            docker pull ${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }}
            docker stop app || true && docker rm app || true
            docker run -d -p 80:80 --name app ${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }}